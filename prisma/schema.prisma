generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  username       String
  email          String           @unique
  image          String?
  role           Role             @default(USER)
  createdAt      DateTime?        @default(now())
  updatedAt      DateTime?        @updatedAt
  Agency         Agency[]
  Dmc            DMC[]
  Enquiries      Enquiry[]
  Helpdesks      HelpDesk[]
  Hotel          Hotel[]
  influencerData InfluencerData[]
  Requests       Request[]
  Reviews        Reviews[]
}

model KeyPersonnel {
  id                String  @id @default(cuid())
  name              String
  position          String
  yearsOfExperience Int
  specialization    String
  agencyId          String?
  dmcId             String?
  Agency            Agency? @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Dmc               DMC?    @relation(fields: [dmcId], references: [id], onDelete: Cascade)
}

model PastProject {
  id          String  @id @default(cuid())
  projectName String
  clientName  String
  year        Int
  description String
  agencyId    String?
  dmcId       String?
  Agency      Agency? @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Dmc         DMC?    @relation(fields: [dmcId], references: [id], onDelete: Cascade)
}

model ClientReference {
  id           String  @id @default(cuid())
  clientName   String
  contactEmail String
  contactPhone String
  testimonial  String
  agencyId     String?
  dmcId        String?
  Agency       Agency? @relation(fields: [agencyId], references: [id])
  Dmc          DMC?    @relation(fields: [dmcId], references: [id])
}

model Agency {
  id                          String             @id @default(cuid())
  priority                    Int                @default(0)
  city_priority               Int                @default(0)
  isCertified                 Boolean            @default(false)
  name                        String
  country                     String
  city                        String
  address                     String
  contactPerson               String             @default("")
  contactEmail                String             @unique
  contactPhoneNumber          String
  websiteUrl                  String?
  companyRegistrationNumber   String             @default("000000000000000")
  yearOfEstablishment         Int
  businessLicenseUpload       String?
  insuranceCertificateUpload  String?
  primaryServices             String[]
  specializedTravelTypes      String[]
  regionsOfOperation          String[]
  internationalCertifications String[]
  memberships                 String[]
  numberOfEmployees           Int
  caseStudyPdf                String?
  images                      String[]
  rating                      Float              @default(0.0)
  reviews                     Int                @default(0)
  description                 String
  methodology                 String?
  createdAt                   DateTime           @default(now())
  updatedAt                   DateTime           @updatedAt
  userId                      String
  User                        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientReferences            ClientReference[]
  Enquiries                   Enquiry[]
  keyPersonnel                KeyPersonnel[]
  pastProjects                PastProject[]
  Reviews                     Reviews[]
  socialMediaLinks            SocialMediaLinks[]
}

model DMC {
  id                          String             @id @default(cuid())
  priority                    Int                @default(0)
  city_priority               Int                @default(0)
  isCertified                 Boolean            @default(false)
  name                        String
  country                     String
  city                        String
  address                     String
  contactPerson               String             @default("")
  contactEmail                String             @unique
  contactPhoneNumber          String
  websiteUrl                  String?
  companyRegistrationNumber   String             @default("000000000000000")
  yearOfEstablishment         Int
  businessLicenseUpload       String?
  insuranceCertificateUpload  String?
  coreServices                String[]
  specialization              String[]
  regionsCovered              String[]
  internationalCertifications String[]
  memberships                 String[]
  numberOfEmployees           Int
  caseStudyPdf                String?
  images                      String[]
  rating                      Float              @default(0.0)
  reviews                     Int                @default(0)
  description                 String
  methodology                 String?
  createdAt                   DateTime           @default(now())
  updatedAt                   DateTime           @updatedAt
  userId                      String
  clientReferences            ClientReference[]
  User                        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  Enquiries                   Enquiry[]
  keyPersonnel                KeyPersonnel[]
  pastProjects                PastProject[]
  Reviews                     Reviews[]
  socialMediaLinks            SocialMediaLinks[]
}

model Hotel {
  id                         String             @id @default(cuid())
  priority                   Int                @default(0)
  city_priority              Int                @default(0)
  isCertified                Boolean            @default(false)
  name                       String
  country                    String
  city                       String
  address                    String
  contactPerson              String             @default("")
  contactEmail               String             @unique
  contactPhoneNumber         String
  websiteUrl                 String?
  companyRegistrationNumber  String             @default("000000000000000")
  yearOfEstablishment        Int
  businessLicenseUpload      String?
  insuranceCertificateUpload String?
  specialization             String[]
  services                   String[]
  images                     String[]
  rating                     Float              @default(0.0)
  reviews                    Int                @default(0)
  description                String
  methodology                String?
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt
  userId                     String
  Enquiries                  Enquiry[]
  User                       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  Reviews                    Reviews[]
  socialMediaLinks           SocialMediaLinks[]
}

model SocialMediaLinks {
  id        String  @id @default(cuid())
  facebook  String?
  instagram String?
  linkedin  String?
  twitter   String?
  youtube   String?
  agencyId  String?
  dmcId     String?
  hotelId   String?
  Agency    Agency? @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Dmc       DMC?    @relation(fields: [dmcId], references: [id], onDelete: Cascade)
  Hotel     Hotel?  @relation(fields: [hotelId], references: [id], onDelete: Cascade)
}

model InfluencerData {
  id             String    @id @default(cuid())
  isCertified    Boolean   @default(false)
  userId         String
  name           String
  image          String
  description    String
  introduction   String?
  speciality     String
  state          String
  country        String
  priority       Int       @default(0)
  state_priority Int       @default(0)
  socialLinks    String[]
  createdAt      DateTime? @default(now())
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HelpDesk {
  id          String         @id @default(cuid())
  userId      String
  title       String
  description String
  status      HelpDeskStatus
  createdAt   DateTime?      @default(now())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String    @id @default(cuid())
  message   String
  type      String
  createdAt DateTime? @default(now())
}

model Reviews {
  id        String    @id @default(cuid())
  name      String
  rating    Int       @default(1)
  review    String
  userId    String
  agencyId  String?
  dmcId     String?
  hotelId   String?
  createdAt DateTime? @default(now())
  Agency    Agency?   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Dmc       DMC?      @relation(fields: [dmcId], references: [id], onDelete: Cascade)
  Hotel     Hotel?    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, agencyId])
  @@unique([userId, dmcId])
  @@unique([userId, hotelId])
}

model Request {
  id        String        @id @default(cuid())
  userId    String
  message   String
  status    RequestStatus @default(PENDING)
  createdAt DateTime?     @default(now())
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Enquiry {
  id          String    @id @default(cuid())
  userId      String
  title       String?
  message     String
  createdAt   DateTime? @default(now())
  agencyId    String?
  dmcId       String?
  hotelId     String?
  phoneNumber String    @default("9999900000")
  Agency      Agency?   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Dmc         DMC?      @relation(fields: [dmcId], references: [id], onDelete: Cascade)
  Hotel       Hotel?    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, agencyId])
  @@unique([userId, dmcId])
  @@unique([userId, hotelId])
}

model AboutContent {
  id        String   @id
  title     String
  content   String
  updatedAt DateTime
}

model PrivacyPolicyContent {
  id        String   @id
  content   String
  updatedAt DateTime
}

model TermsContent {
  id        String   @id
  content   String
  updatedAt DateTime
}

enum Role {
  USER
  ADMIN
  Influencer
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum HelpDeskStatus {
  PENDING
  RESOLVED
}


model City {
  id        String   @id @default(cuid())
  name     String
  country  String
  image    String
  priority String?
}